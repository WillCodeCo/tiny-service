##
# AUTOGENERATED CODE FILE
##
# from titan.tuple_class_codegen import TupleField, TupleClassCodegen
# 
# 
# def generate_code():
#     yield from TupleClassCodegen.generate_imports()
#     yield "class CommandReceipt:"
#     yield "    pass"
#     yield ""
#     yield from TupleClassCodegen.generate_code( 'CommandAcceptedReceipt', [TupleField.str('command_id')], additional_parent_classes=['CommandReceipt'] )
#     yield from TupleClassCodegen.generate_code( 'CommandRejectedReceipt', [TupleField.str('command_id'), TupleField.str('reason')], additional_parent_classes=['CommandReceipt'] )
#     yield from TupleClassCodegen.generate_code( 'InvalidCommandReceipt', [TupleField.str('reason')], additional_parent_classes=['CommandReceipt'] )
# 
##
import typing
import msgpack
import io

class CommandReceipt:
    pass

class CommandAcceptedReceipt(tuple, CommandReceipt):
    """Tuple Class definition for CommandAcceptedReceipt"""

    def __new__(cls, command_id: str):
        try:
            assert isinstance(command_id, str), f'Expected `command_id` to be of type `str` not `{type(command_id)}`'
            return super().__new__(cls, (command_id, ))
        except AssertionError as e:
            raise ValueError(str(e))

    @classmethod
    def tuple_type(cls) -> str:
        return cls.__name__

    @classmethod
    def create_from_tuple(cls, tuple_value: tuple):
        if not(isinstance(tuple_value, tuple)) or len(tuple_value) != 1:
            raise ValueError
        return cls(command_id=tuple_value[0])

    @classmethod
    def create_from_bytes(cls, tuple_bytes: bytes):
        return cls.create_from_tuple(msgpack.unpackb(tuple_bytes, use_list=False, raw=False))

    @classmethod
    def generate_from_stream(cls, buf: io.BytesIO):
        unpacker = msgpack.Unpacker(buf, use_list=False, raw=False)
        for unpacked in unpacker:
            yield cls.create_from_tuple(unpacked)

    def __str__(self):
        return f"{self.tuple_type()}{str(tuple(self))}"

    def __repr__(self):
        return f"{self.tuple_type()}{repr(tuple(self))}"

    def __eq__(self, other):
        return (type(self) == type(other)) and (tuple(self) == tuple(other))

    def __ne__(self, other):
        return (not (self == other))

    def __hash__(self):
        return hash(tuple(self))

    def command_id(self) -> str:
        return self[0]

    def serialize_to_bytes(self):
        return msgpack.packb(self, use_bin_type=True)

    def serialize_to_dict(self):
        return {
            'command_id': self.command_id(),
        }

class CommandRejectedReceipt(tuple, CommandReceipt):
    """Tuple Class definition for CommandRejectedReceipt"""

    def __new__(cls, command_id: str, reason: str):
        try:
            assert isinstance(command_id, str), f'Expected `command_id` to be of type `str` not `{type(command_id)}`'
            assert isinstance(reason, str), f'Expected `reason` to be of type `str` not `{type(reason)}`'
            return super().__new__(cls, (command_id, reason))
        except AssertionError as e:
            raise ValueError(str(e))

    @classmethod
    def tuple_type(cls) -> str:
        return cls.__name__

    @classmethod
    def create_from_tuple(cls, tuple_value: tuple):
        if not(isinstance(tuple_value, tuple)) or len(tuple_value) != 2:
            raise ValueError
        return cls(command_id=tuple_value[0], reason=tuple_value[1])

    @classmethod
    def create_from_bytes(cls, tuple_bytes: bytes):
        return cls.create_from_tuple(msgpack.unpackb(tuple_bytes, use_list=False, raw=False))

    @classmethod
    def generate_from_stream(cls, buf: io.BytesIO):
        unpacker = msgpack.Unpacker(buf, use_list=False, raw=False)
        for unpacked in unpacker:
            yield cls.create_from_tuple(unpacked)

    def __str__(self):
        return f"{self.tuple_type()}{str(tuple(self))}"

    def __repr__(self):
        return f"{self.tuple_type()}{repr(tuple(self))}"

    def __eq__(self, other):
        return (type(self) == type(other)) and (tuple(self) == tuple(other))

    def __ne__(self, other):
        return (not (self == other))

    def __hash__(self):
        return hash(tuple(self))

    def command_id(self) -> str:
        return self[0]

    def reason(self) -> str:
        return self[1]

    def serialize_to_bytes(self):
        return msgpack.packb(self, use_bin_type=True)

    def serialize_to_dict(self):
        return {
            'command_id': self.command_id(),
            'reason': self.reason(),
        }

class InvalidCommandReceipt(tuple, CommandReceipt):
    """Tuple Class definition for InvalidCommandReceipt"""

    def __new__(cls, reason: str):
        try:
            assert isinstance(reason, str), f'Expected `reason` to be of type `str` not `{type(reason)}`'
            return super().__new__(cls, (reason, ))
        except AssertionError as e:
            raise ValueError(str(e))

    @classmethod
    def tuple_type(cls) -> str:
        return cls.__name__

    @classmethod
    def create_from_tuple(cls, tuple_value: tuple):
        if not(isinstance(tuple_value, tuple)) or len(tuple_value) != 1:
            raise ValueError
        return cls(reason=tuple_value[0])

    @classmethod
    def create_from_bytes(cls, tuple_bytes: bytes):
        return cls.create_from_tuple(msgpack.unpackb(tuple_bytes, use_list=False, raw=False))

    @classmethod
    def generate_from_stream(cls, buf: io.BytesIO):
        unpacker = msgpack.Unpacker(buf, use_list=False, raw=False)
        for unpacked in unpacker:
            yield cls.create_from_tuple(unpacked)

    def __str__(self):
        return f"{self.tuple_type()}{str(tuple(self))}"

    def __repr__(self):
        return f"{self.tuple_type()}{repr(tuple(self))}"

    def __eq__(self, other):
        return (type(self) == type(other)) and (tuple(self) == tuple(other))

    def __ne__(self, other):
        return (not (self == other))

    def __hash__(self):
        return hash(tuple(self))

    def reason(self) -> str:
        return self[0]

    def serialize_to_bytes(self):
        return msgpack.packb(self, use_bin_type=True)

    def serialize_to_dict(self):
        return {
            'reason': self.reason(),
        }
