##
# AUTOGENERATED CODE FILE
##
# from titan.tiny_service.events.event_class_codegen import EventField, EventClassCodegen
# from titan.tiny_service.commands.command_class_codegen import CommandField, CommandClassCodegen
# 
# def generate_code():
#     yield "\n".join(set(EventClassCodegen.generate_imports()) | set(CommandClassCodegen.generate_imports()))
#     yield from EventClassCodegen.generate_code('WrappedCommandEvent', [EventField.tuple_class('command', 'Command')])
# 
##

import io
import msgpack
from titan.tiny_service.commands import Command
from titan.tiny_service.events import Event
import typing
class WrappedCommandEvent(tuple, Event):
    """Tuple Class definition for WrappedCommandEvent"""

    def __new__(cls, event_id: str, command: Command):
        try:
            assert isinstance(event_id, str), f'Expected `event_id` to be of type `str` not `{type(event_id)}`'
            assert isinstance(command, Command), f'Expected `command` to be of type `Command` not `{type(command)}`'
            return super().__new__(cls, (event_id, command))
        except AssertionError as e:
            raise ValueError(str(e))

    @classmethod
    def tuple_type(cls) -> str:
        return cls.__name__

    @classmethod
    def create_from_tuple(cls, tuple_value: tuple):
        if not(isinstance(tuple_value, tuple)) or len(tuple_value) != 2:
            raise ValueError
        return cls(event_id=tuple_value[0], command=Command.create_from_tuple(tuple_value[1]))

    @classmethod
    def create_from_bytes(cls, tuple_bytes: bytes):
        return cls.create_from_tuple(msgpack.unpackb(tuple_bytes, use_list=False, raw=False))

    @classmethod
    def generate_from_stream(cls, buf: io.BytesIO):
        unpacker = msgpack.Unpacker(buf, use_list=False, raw=False)
        for unpacked in unpacker:
            yield cls.create_from_tuple(unpacked)

    def __str__(self):
        return f"{self.tuple_type()}{str(tuple(self))}"

    def __repr__(self):
        return f"{self.tuple_type()}{repr(tuple(self))}"

    def __eq__(self, other):
        return (type(self) == type(other)) and (tuple(self) == tuple(other))

    def __ne__(self, other):
        return (not (self == other))

    def __hash__(self):
        return hash(tuple(self))

    def event_id(self) -> str:
        return self[0]

    def command(self) -> Command:
        return self[1]

    def serialize_to_bytes(self):
        return msgpack.packb(self, use_bin_type=True)

    def serialize_to_dict(self):
        return {
            'event_id': self.event_id(),
            'command': self.command().serialize_to_dict(),
        }

    @classmethod
    def create(cls, command: Command):
        return cls(Event.create_event_id(), command)

    @classmethod
    def create_with_timestamp(cls, timestamp: int, command: Command):
        return cls.create_from_tuple( (Event.create_event_id_with_timestamp(timestamp), command) )

    @classmethod
    def event_type(cls):
        return cls.__name__

    def timestamp(self):
        return Event.timestamp_from_event_id(self.event_id())
